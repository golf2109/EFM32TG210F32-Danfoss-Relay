<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TG210.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TG210.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Oct 20 16:10:53 2016
<BR><P>
<H3>Maximum Stack Usage =        124 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; enter_DefaultMode_from_RESET &rArr; USART1_enter_DefaultMode_from_RESET &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ACMP0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[14]">ADC0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[24]">AES_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[20]">CMU_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[15]">DAC0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[e]">DMA_IRQHandler</a> from em_dma.o(i.DMA_IRQHandler) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[f]">GPIO_EVEN_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[17]">GPIO_ODD_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1b]">LESENSE_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1d]">LETIMER0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1c]">LEUART0_IRQHandler</a> from main.o(i.LEUART0_IRQHandler) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[23]">MSC_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1e]">PCNT0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_efm32tg.o(i.SystemInit) referenced from startup_efm32tg.o(.text)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[11]">USART0_RX_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[12]">USART0_TX_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[19]">USART1_RX_IRQHandler</a> from main.o(i.USART1_RX_IRQHandler) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1a]">USART1_TX_IRQHandler</a> from main.o(i.USART1_TX_IRQHandler) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[21]">VCMP_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_efm32tg.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[78]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[79]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[80]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[81]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[82]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[83]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[84]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[85]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[86]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[87]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[88]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[90]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[33]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[97]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[29]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[98]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[99]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; enter_DefaultMode_from_RESET &rArr; USART1_enter_DefaultMode_from_RESET &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[32]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[34]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>LESENSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[31]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>CMU_ClockEnable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, em_cmu.o(i.CMU_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncReg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[3c]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, em_cmu.o(i.CMU_ClockFreqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
</UL>

<P><STRONG><a name="[48]"></a>CMU_ClockSelectGet</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, em_cmu.o(i.CMU_ClockSelectGet))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
</UL>

<P><STRONG><a name="[42]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, em_cmu.o(i.CMU_ClockSelectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_UpdateOscConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[47]"></a>CMU_HFRCOBandSet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, em_cmu.o(i.CMU_HFRCOBandSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMU_HFRCOBandSet &rArr; flashWaitStateMax &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, em_cmu.o(i.CMU_OscillatorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMU_OscillatorEnable &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_UpdateOscConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[4a]"></a>CMU_enter_DefaultMode_from_RESET</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, initdevice.o(i.CMU_enter_DefaultMode_from_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMU_enter_DefaultMode_from_RESET &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[e]"></a>DMA_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, em_dma.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_danfoss
</UL>

<P><STRONG><a name="[45]"></a>EMU_UpdateOscConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_emu.o(i.EMU_UpdateOscConfig))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[1c]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(i.LEUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART0_IRQHandler &rArr; GPIO_PinOutClear
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Rx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntEnable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LEUART0_enter_DefaultMode_from_RESET</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, initdevice.o(i.LEUART0_enter_DefaultMode_from_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LEUART0_enter_DefaultMode_from_RESET &rArr; LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[53]"></a>LEUART_BaudrateSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, em_leuart.o(i.LEUART_BaudrateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[55]"></a>LEUART_FreezeEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_leuart.o(i.LEUART_FreezeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[50]"></a>LEUART_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, em_leuart.o(i.LEUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[4b]"></a>LEUART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_leuart.o(i.LEUART_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>LEUART_RxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(i.LEUART_RxDmaInEM2Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_RxDmaInEM2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[56]"></a>LEUART_Tx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_leuart.o(i.LEUART_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_danfoss
</UL>

<P><STRONG><a name="[51]"></a>LEUART_TxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(i.LEUART_TxDmaInEM2Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_TxDmaInEM2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[64]"></a>LFXO_enter_DefaultMode_from_RESET</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, initdevice.o(i.LFXO_enter_DefaultMode_from_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[65]"></a>PORTIO_enter_DefaultMode_from_RESET</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, initdevice.o(i.PORTIO_enter_DefaultMode_from_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SystemCoreClockGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, system_efm32tg.o(i.SystemCoreClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>SystemHFClockGet</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, system_efm32tg.o(i.SystemHFClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_efm32tg.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(i.SystemLFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[68]"></a>SystemLFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(i.SystemLFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[66]"></a>SystemMaxCoreClockGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_efm32tg.o(i.SystemMaxCoreClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
</UL>

<P><STRONG><a name="[69]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(i.SystemULFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[57]"></a>TIMER0_enter_DefaultMode_from_RESET</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, initdevice.o(i.TIMER0_enter_DefaultMode_from_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER0_enter_DefaultMode_from_RESET &rArr; TIMER_InitCC
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[58]"></a>TIMER_Init</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, em_timer.o(i.TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[59]"></a>TIMER_InitCC</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, em_timer.o(i.TIMER_InitCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_InitCC
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[19]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, main.o(i.USART1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_RX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Rx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.USART1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_TX_IRQHandler &rArr; GPIO_PinOutClear
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART1_enter_DefaultMode_from_RESET</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, initdevice.o(i.USART1_enter_DefaultMode_from_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART1_enter_DefaultMode_from_RESET &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitPrsTrigger
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[61]"></a>USART_BaudrateAsyncSet</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, em_usart.o(i.USART_BaudrateAsyncSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[5f]"></a>USART_InitAsync</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, em_usart.o(i.USART_InitAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[60]"></a>USART_InitPrsTrigger</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, em_usart.o(i.USART_InitPrsTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET
</UL>

<P><STRONG><a name="[62]"></a>USART_Reset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, em_usart.o(i.USART_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[5b]"></a>USART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_usart.o(i.USART_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>USART_Tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, em_usart.o(i.USART_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>

<P><STRONG><a name="[6c]"></a>crc16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, danfoss.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frq_danfoss
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>enter_DefaultMode_from_RESET</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, initdevice.o(i.enter_DefaultMode_from_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = enter_DefaultMode_from_RESET &rArr; USART1_enter_DefaultMode_from_RESET &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_enter_DefaultMode_from_RESET
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTIO_enter_DefaultMode_from_RESET
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFXO_enter_DefaultMode_from_RESET
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 398 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = main &rArr; enter_DefaultMode_from_RESET &rArr; USART1_enter_DefaultMode_from_RESET &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_danfoss
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_danfoss
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_danfoss
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frq_danfoss
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntEnable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[75]"></a>read_danfoss</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, danfoss.o(i.read_danfoss))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_danfoss
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_danfoss
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frq_danfoss
</UL>

<P><STRONG><a name="[6d]"></a>send_char</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.send_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_char &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>send_danfoss</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.send_danfoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_danfoss &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_danfoss
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_danfoss
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frq_danfoss
</UL>

<P><STRONG><a name="[70]"></a>set_frq_danfoss</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, danfoss.o(i.set_frq_danfoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_frq_danfoss &rArr; send_danfoss &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_danfoss
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_danfoss
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_danfoss
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>start_danfoss</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, danfoss.o(i.start_danfoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_danfoss &rArr; send_danfoss &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_danfoss
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_danfoss
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_danfoss
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>stop_danfoss</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, danfoss.o(i.stop_danfoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stop_danfoss &rArr; send_danfoss &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_danfoss
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_danfoss
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_danfoss
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>test_danfoss</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, danfoss.o(i.test_danfoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = test_danfoss &rArr; set_frq_danfoss &rArr; send_danfoss &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_danfoss
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_danfoss
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_frq_danfoss
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>GPIO_PinOutClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.GPIO_PinOutClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TX_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>GPIO_PinOutSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.GPIO_PinOutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_danfoss
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>

<P><STRONG><a name="[4c]"></a>LEUART_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.LEUART_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>LEUART_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.LEUART_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>USART_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.USART_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TX_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>USART_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.USART_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TX_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, em_cmu.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[3b]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_cmu.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>

<P><STRONG><a name="[41]"></a>auxClkGet</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, em_cmu.o(i.auxClkGet))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
</UL>

<P><STRONG><a name="[40]"></a>dbgClkGet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, em_cmu.o(i.dbgClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbgClkGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[46]"></a>flashWaitStateControl</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, em_cmu.o(i.flashWaitStateControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
</UL>

<P><STRONG><a name="[44]"></a>flashWaitStateMax</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_cmu.o(i.flashWaitStateMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flashWaitStateMax &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemMaxCoreClockGet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
</UL>

<P><STRONG><a name="[3f]"></a>lfClkGet</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, em_cmu.o(i.lfClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemULFRCOClockGet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[3a]"></a>syncReg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_cmu.o(i.syncReg))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>

<P><STRONG><a name="[54]"></a>LEUART_Sync</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, em_leuart.o(i.LEUART_Sync))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
